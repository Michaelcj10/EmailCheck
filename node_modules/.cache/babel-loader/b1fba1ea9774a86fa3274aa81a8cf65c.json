{"ast":null,"code":"const dnscache = require('dnscache');\n\nconst co = require('co');\n\nfunction dns_checker(email, options) {\n  return new Promise((resolve, reject) => {\n    options = options || {\n      enable: true,\n      ttl: 300,\n      cachesize: 10000\n    };\n    const dns = dnscache(options);\n    const domain = email.split('@')[1];\n    dns.resolveMx(domain, (error, addresses) => {\n      if (error) {\n        return reject(false);\n      }\n\n      return resolve(addresses.length > 0);\n    });\n  }).then(result => result).catch(err => false);\n}\n\nmodule.exports = dns_checker; //for testing purpose\n\nif (!module.parent) {\n  let testing_purpose = co.wrap(function* () {\n    let res_didYouMean = yield dns_checker(\"mehmet.kozan@hotmalilili.com\");\n    debugger;\n    let res_syntaxCheck = yield dns_checker(\"mehmet.kozan@hotmali.com\");\n    debugger;\n  });\n  testing_purpose();\n}","map":{"version":3,"sources":["C:/Users/michael.james/Desktop/EmailValidation/email-validation/node_modules/email-domain-check/email-domain-check.js"],"names":["dnscache","require","co","dns_checker","email","options","Promise","resolve","reject","enable","ttl","cachesize","dns","domain","split","resolveMx","error","addresses","length","then","result","catch","err","module","exports","parent","testing_purpose","wrap","res_didYouMean","res_syntaxCheck"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,SAASE,WAAT,CAAqBC,KAArB,EAA2BC,OAA3B,EAAmC;AAC/B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACnB;AACIH,IAAAA,OAAO,GAAGA,OAAO,IAAI;AAACI,MAAAA,MAAM,EAAE,IAAT;AAAeC,MAAAA,GAAG,EAAE,GAApB;AAAyBC,MAAAA,SAAS,EAAE;AAApC,KAArB;AACA,UAAMC,GAAG,GAAGZ,QAAQ,CAACK,OAAD,CAApB;AACA,UAAMQ,MAAM,GAAGT,KAAK,CAACU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAf;AAEAF,IAAAA,GAAG,CAACG,SAAJ,CAAcF,MAAd,EAAsB,CAACG,KAAD,EAAQC,SAAR,KACtB;AACI,UAAGD,KAAH,EACA;AACI,eAAOR,MAAM,CAAC,KAAD,CAAb;AACH;;AAED,aAAOD,OAAO,CAACU,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAd;AACH,KARD;AASH,GAfM,EAgBNC,IAhBM,CAgBDC,MAAM,IAAEA,MAhBP,EAiBNC,KAjBM,CAiBAC,GAAG,IAAE,KAjBL,CAAP;AAkBH;;AAEDC,MAAM,CAACC,OAAP,GAAkBrB,WAAlB,C,CAGA;;AACA,IAAI,CAACoB,MAAM,CAACE,MAAZ,EACA;AACI,MAAIC,eAAe,GAAGxB,EAAE,CAACyB,IAAH,CAAQ,aAAY;AACtC,QAAIC,cAAc,GAAG,MAAMzB,WAAW,CAAC,8BAAD,CAAtC;AACA;AAEA,QAAI0B,eAAe,GAAG,MAAM1B,WAAW,CAAC,0BAAD,CAAvC;AACA;AAEH,GAPqB,CAAtB;AASAuB,EAAAA,eAAe;AAClB","sourcesContent":["const dnscache = require('dnscache');\nconst co = require('co');\n\nfunction dns_checker(email,options){\n    return new Promise((resolve, reject) =>\n    {\n        options = options || {enable: true, ttl: 300, cachesize: 10000};\n        const dns = dnscache(options);\n        const domain = email.split('@')[1];\n\n        dns.resolveMx(domain, (error, addresses) =>\n        {\n            if(error)\n            {\n                return reject(false);\n            }\n\n            return resolve(addresses.length > 0);\n        });\n    })\n    .then(result=>result)\n    .catch(err=>false);\n}\n\nmodule.exports  = dns_checker;\n\n\n//for testing purpose\nif (!module.parent) \n{\n    let testing_purpose = co.wrap(function* (){\n        let res_didYouMean = yield dns_checker(\"mehmet.kozan@hotmalilili.com\");\n        debugger;\n\n        let res_syntaxCheck = yield dns_checker(\"mehmet.kozan@hotmali.com\");\n        debugger;\n\n    });\n\n    testing_purpose();\n}"]},"metadata":{},"sourceType":"script"}