{"ast":null,"code":"/*\n* Copyright (c) 2013, Yahoo! Inc. All rights reserved.\n* Copyrights licensed under the New BSD License.\n* See the accompanying LICENSE file for terms.\n*/\nvar CacheObject = require('./cache.js'),\n    deepCopy = require('lodash.clone'),\n    dns = require('dns');\n/*\n * Stores the list of callbacks waiting for a dns call.\n */\n\n\nvar callbackList = {}; // original function storage\n\nvar backup_object = {\n  lookup: dns.lookup,\n  resolve: dns.resolve,\n  resolve4: dns.resolve4,\n  resolve6: dns.resolve6,\n  resolveMx: dns.resolveMx,\n  resolveTxt: dns.resolveTxt,\n  resolveSrv: dns.resolveSrv,\n  resolveNs: dns.resolveNs,\n  resolveCname: dns.resolveCname,\n  reverse: dns.reverse\n};\n/*\n * Make a deep copy of the supplied object. This function reliably copies only\n * what is valid for a JSON object, array, or other element.\n */\n\nvar deepCopy = function (o) {\n  var newArr, ix, newObj, prop;\n\n  if (!o || typeof o !== 'object') {\n    return o;\n  }\n\n  if (Array.isArray(o)) {\n    newArr = [];\n\n    for (ix = 0; ix < o.length; ix += 1) {\n      newArr.push(deepCopy(o[ix]));\n    }\n\n    return newArr;\n  } else {\n    newObj = {};\n\n    for (prop in o) {\n      /* istanbul ignore else */\n      if (o.hasOwnProperty(prop)) {\n        newObj[prop] = deepCopy(o[prop]);\n      }\n    }\n\n    return newObj;\n  }\n}; // original function storage\n\n\nvar EnhanceDns = function (conf) {\n  conf = conf || {};\n  conf.ttl = parseInt(conf.ttl, 10) || 300; //0 is not allowed ie it ttl is set to 0, it will take the default\n\n  conf.cachesize = parseInt(conf.cachesize, 10); //0 is allowed but it will disable the caching\n\n  if (isNaN(conf.cachesize)) {\n    conf.cachesize = 1000; //set default cache size to 1000 records max\n  }\n\n  if (!conf.enable || conf.cachesize <= 0) {\n    delete dns.internalCache;\n\n    for (var key in backup_object) {\n      /* istanbul ignore else */\n      if (backup_object.hasOwnProperty(key)) {\n        dns[key] = backup_object[key];\n      }\n    }\n\n    return dns;\n  } // insert cache object to the instance\n\n\n  if (!dns.internalCache) {\n    dns.internalCache = conf.cache ? new conf.cache(conf) : new CacheObject(conf);\n    callbackList = {};\n  }\n\n  var cache = dns.internalCache; // override dns.lookup method\n\n  dns.lookup = function (domain, options, callback) {\n    var family = 0;\n    var hints = 0;\n    var all = false;\n\n    if (arguments.length === 2) {\n      callback = options;\n      options = family;\n    } else if (typeof options === 'object') {\n      if (options.family) {\n        family = +options.family;\n\n        if (family !== 4 && family !== 6) {\n          callback(new Error('invalid argument: `family` must be 4 or 6'));\n          return;\n        }\n      }\n      /*istanbul ignore next - \"hints\" require node 0.12+*/\n\n\n      if (options.hints) {\n        hints = +options.hints;\n      }\n\n      all = options.all === true;\n    } else if (options) {\n      family = +options;\n\n      if (family !== 4 && family !== 6) {\n        callback(new Error('invalid argument: `family` must be 4 or 6'));\n        return;\n      }\n    }\n\n    var key = 'lookup_' + domain + '_' + family + '_' + hints + '_' + all;\n    cache.get(key, function (error, record) {\n      if (record) {\n        /*istanbul ignore next - \"all\" option require node 4+*/\n        if (Array.isArray(record)) {\n          return callback(error, record);\n        }\n\n        return callback(error, record.address, record.family);\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.lookup(domain, options, function (err, address, family_r) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          var value;\n          /*istanbul ignore next - \"all\" option require node 4+*/\n\n          if (Array.isArray(address)) {\n            value = deepCopy(address);\n          } else {\n            value = {\n              'address': address,\n              'family': family_r\n            };\n          }\n\n          cache.set(key, value, function () {\n            list.forEach(function (cb) {\n              cb(err, address, family_r);\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.resolve method\n\n\n  dns.resolve = function (domain, type, callback) {\n    var type_new, callback_new;\n\n    if (typeof type === 'string') {\n      type_new = type;\n      callback_new = callback;\n    } else {\n      type_new = \"A\";\n      callback_new = type;\n    }\n\n    var key = 'resolve_' + domain + '_' + type_new;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback_new(error, deepCopy(record), true);\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback_new);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolve(domain, type_new, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses), false);\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback_new(err);\n      }\n    });\n  }; // override dns.resolve4 method\n\n\n  dns.resolve4 = function (domain, callback) {\n    var key = 'resolve4_' + domain;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolve4(domain, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.resolve6 method\n\n\n  dns.resolve6 = function (domain, callback) {\n    var key = 'resolve6_' + domain;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolve6(domain, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.resolveMx method\n\n\n  dns.resolveMx = function (domain, callback) {\n    var key = 'resolveMx_' + domain;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolveMx(domain, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.resolveTxt method\n\n\n  dns.resolveTxt = function (domain, callback) {\n    var key = 'resolveTxt_' + domain;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolveTxt(domain, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.resolveSrv method\n\n\n  dns.resolveSrv = function (domain, callback) {\n    var key = 'resolveSrv_' + domain;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n      /* istanbul ignore if */\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolveSrv(domain, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.resolveNs method\n\n\n  dns.resolveNs = function (domain, callback) {\n    var key = 'resolveNs_' + domain;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolveNs(domain, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.resolveCname method\n\n\n  dns.resolveCname = function (domain, callback) {\n    var key = 'resolveCname_' + domain;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.resolveCname(domain, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  }; // override dns.reverse method\n\n\n  dns.reverse = function (ip, callback) {\n    var key = 'reverse_' + ip;\n    cache.get(key, function (error, record) {\n      if (record) {\n        return callback(error, deepCopy(record));\n      }\n\n      var list = callbackList[key] = callbackList[key] || [];\n      list.push(callback);\n\n      if (list.length > 1) {\n        return;\n      }\n\n      try {\n        backup_object.reverse(ip, function (err, addresses) {\n          if (err) {\n            list.forEach(function (cb) {\n              cb(err);\n            });\n            delete callbackList[key];\n            return;\n          }\n\n          cache.set(key, addresses, function () {\n            list.forEach(function (cb) {\n              cb(err, deepCopy(addresses));\n            });\n            delete callbackList[key];\n          });\n        });\n      } catch (err) {\n        /*istanbul ignore next - doesn't throw in node 0.10*/\n        callback(err);\n      }\n    });\n  };\n\n  return dns;\n};\n\nmodule.exports = function (conf) {\n  return new EnhanceDns(conf);\n};","map":{"version":3,"sources":["C:/Users/michael.james/Desktop/EmailValidation/email-validation/node_modules/dnscache/lib/index.js"],"names":["CacheObject","require","deepCopy","dns","callbackList","backup_object","lookup","resolve","resolve4","resolve6","resolveMx","resolveTxt","resolveSrv","resolveNs","resolveCname","reverse","o","newArr","ix","newObj","prop","Array","isArray","length","push","hasOwnProperty","EnhanceDns","conf","ttl","parseInt","cachesize","isNaN","enable","internalCache","key","cache","domain","options","callback","family","hints","all","arguments","Error","get","error","record","address","list","err","family_r","forEach","cb","value","set","type","type_new","callback_new","addresses","ip","module","exports"],"mappings":"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","sourcesContent":["/*\n* Copyright (c) 2013, Yahoo! Inc. All rights reserved.\n* Copyrights licensed under the New BSD License.\n* See the accompanying LICENSE file for terms.\n*/\n\nvar CacheObject = require('./cache.js'),\n    deepCopy = require('lodash.clone'),\n    dns = require('dns');\n\n/*\n * Stores the list of callbacks waiting for a dns call.\n */\nvar callbackList = {};\n\n// original function storage\nvar backup_object = {\n    lookup : dns.lookup,\n    resolve : dns.resolve,\n    resolve4 : dns.resolve4,\n    resolve6 : dns.resolve6,\n    resolveMx : dns.resolveMx,\n    resolveTxt : dns.resolveTxt,\n    resolveSrv : dns.resolveSrv,\n    resolveNs : dns.resolveNs,\n    resolveCname : dns.resolveCname,\n    reverse : dns.reverse\n};\n\n/*\n * Make a deep copy of the supplied object. This function reliably copies only\n * what is valid for a JSON object, array, or other element.\n */\nvar deepCopy = function (o) {\n    var newArr, ix, newObj, prop;\n\n    if (!o || typeof o !== 'object') {\n        return o;\n    }\n\n    if (Array.isArray(o)) {\n        newArr = [];\n        for (ix = 0; ix < o.length; ix += 1) {\n            newArr.push(deepCopy(o[ix]));\n        }\n        return newArr;\n    } else {\n        newObj = {};\n        for (prop in o) {\n            /* istanbul ignore else */\n            if (o.hasOwnProperty(prop)) {\n                newObj[prop] = deepCopy(o[prop]);\n            }\n        }\n        return newObj;\n    }\n};\n\n\n// original function storage\nvar EnhanceDns = function (conf) {\n        conf = conf || {};\n        conf.ttl = parseInt(conf.ttl, 10) || 300; //0 is not allowed ie it ttl is set to 0, it will take the default\n        conf.cachesize = parseInt(conf.cachesize, 10); //0 is allowed but it will disable the caching\n\n        if (isNaN(conf.cachesize)) {\n            conf.cachesize = 1000; //set default cache size to 1000 records max\n        }\n\n        if(!conf.enable || conf.cachesize <= 0) {\n            delete dns.internalCache;\n            for(var key in backup_object) {\n                /* istanbul ignore else */\n                if (backup_object.hasOwnProperty(key)) {\n                    dns[key] = backup_object[key];\n                }\n            }\n            return dns;\n        }\n\n        // insert cache object to the instance\n        if(!dns.internalCache) {\n            dns.internalCache = conf.cache ? new conf.cache(conf) : new CacheObject(conf);\n            callbackList = {};\n        }\n\n        var cache = dns.internalCache;\n\n        // override dns.lookup method\n        dns.lookup = function (domain, options, callback) {\n            var family = 0;\n            var hints = 0;\n            var all = false;\n            if (arguments.length === 2) {\n                callback = options;\n                options = family;\n            } else if (typeof options === 'object') {\n                if (options.family) {\n                    family = +options.family;\n                    if (family !== 4 && family !== 6) {\n                        callback(new Error('invalid argument: `family` must be 4 or 6'));\n                        return;\n                    }\n                }\n                /*istanbul ignore next - \"hints\" require node 0.12+*/\n                if (options.hints) {\n                    hints = +options.hints;\n                }\n                all = (options.all === true);\n            } else if (options) {\n                family = +options;\n                if (family !== 4 && family !== 6) {\n                    callback(new Error('invalid argument: `family` must be 4 or 6'));\n                    return;\n                }\n            }\n\n            var key = 'lookup_' + domain + '_' + family + '_' + hints + '_' + all;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    /*istanbul ignore next - \"all\" option require node 4+*/\n                    if (Array.isArray(record)) {\n                        return callback(error, record);\n                    }\n                    return callback(error, record.address, record.family);\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try{\n                    backup_object.lookup(domain, options, function (err, address, family_r) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        var value;\n                        /*istanbul ignore next - \"all\" option require node 4+*/\n                        if (Array.isArray(address)) {\n                            value = deepCopy(address);\n                        } else {\n                            value = {\n                                'address' : address,\n                                'family' : family_r\n                            };\n                        }\n                        cache.set(key, value, function () {\n                            list.forEach(function (cb) { cb(err, address, family_r); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolve method\n        dns.resolve = function (domain, type, callback) {\n            var type_new, callback_new;\n\n            if (typeof type === 'string') {\n                type_new = type;\n                callback_new = callback;\n            } else {\n                type_new = \"A\";\n                callback_new = type;\n            }\n\n            var key = 'resolve_' + domain + '_' + type_new;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback_new(error, deepCopy(record), true);\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback_new);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolve(domain, type_new, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses), false); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback_new(err);\n                }\n            });\n        };\n\n        // override dns.resolve4 method\n        dns.resolve4 = function (domain, callback) {\n            var key = 'resolve4_' + domain;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolve4(domain, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolve6 method\n        dns.resolve6 = function (domain, callback) {\n            var key = 'resolve6_' + domain;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolve6(domain, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveMx method\n        dns.resolveMx = function (domain, callback) {\n            var key = 'resolveMx_' + domain;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolveMx(domain, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveTxt method\n        dns.resolveTxt = function (domain, callback) {\n            var key = 'resolveTxt_' + domain;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolveTxt(domain, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveSrv method\n        dns.resolveSrv = function (domain, callback) {\n            var key = 'resolveSrv_' + domain;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                /* istanbul ignore if */\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolveSrv(domain, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveNs method\n        dns.resolveNs = function (domain, callback) {\n            var key = 'resolveNs_' + domain;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolveNs(domain, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.resolveCname method\n        dns.resolveCname = function (domain, callback) {\n            var key = 'resolveCname_' + domain;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.resolveCname(domain, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n\n        // override dns.reverse method\n        dns.reverse = function (ip, callback) {\n            var key = 'reverse_' + ip;\n            cache.get(key, function (error, record) {\n                if (record) {\n                    return callback(error, deepCopy(record));\n                }\n\n                var list = callbackList[key] = callbackList[key] || [];\n                list.push(callback);\n\n                if (list.length > 1) { return; }\n\n                try {\n                    backup_object.reverse(ip, function (err, addresses) {\n                        if (err) {\n                            list.forEach(function (cb) { cb(err); });\n                            delete callbackList[key];\n                            return;\n                        }\n                        cache.set(key, addresses, function () {\n                            list.forEach(function (cb) { cb(err, deepCopy(addresses)); });\n                            delete callbackList[key];\n                        });\n                    });\n                } catch (err) {\n                    /*istanbul ignore next - doesn't throw in node 0.10*/\n                    callback(err);\n                }\n            });\n        };\n        return dns;\n};\n\nmodule.exports = function(conf) {\n    return new EnhanceDns(conf);\n};\n"]},"metadata":{},"sourceType":"script"}